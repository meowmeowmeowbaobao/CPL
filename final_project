

#include <SDL.h>
#include <iostream>
#include <vector>
#include <ctime>

// Block dimensions
const int BLOCK_SIZE = 30;

// Grid dimensions
const int FIELD_WIDTH = 10;
const int FIELD_HEIGHT = 20;

// Screen dimensions
const int SCREEN_WIDTH = FIELD_WIDTH * BLOCK_SIZE;
const int SCREEN_HEIGHT = FIELD_HEIGHT * BLOCK_SIZE;

// Define the shapes of the Tetriminos
const int shapes[7][4] = {
    1, 3, 5, 7, // I
    2, 4, 5, 7, // Z
    3, 5, 4, 6, // S
    3, 5, 4, 7, // T
    2, 3, 5, 7, // L
    3, 5, 7, 6, // J
    2, 3, 4, 5  // O
};

// Grid
int field[FIELD_HEIGHT][FIELD_WIDTH] = { 0 };

struct Point {
    int x, y;
} a[4], b[4]; // a - current, b - temporary

bool check() {
    for (int i = 0; i < 4; i++) {
        if (a[i].x < 0 || a[i].x >= FIELD_WIDTH || a[i].y >= FIELD_HEIGHT)
            return 0;
        else if (field[a[i].y][a[i].x])
            return 0;
    }
    return 1;
}

void clearLines() {
    int k = FIELD_HEIGHT - 1;
    for (int i = FIELD_HEIGHT - 1; i >= 0; i--) {
        int count = 0;
        for (int j = 0; j < FIELD_WIDTH; j++) {
            if (field[i][j]) count++;
            field[k][j] = field[i][j];
        }
        if (count < FIELD_WIDTH) k--;
    }
}

void showStartScreen(SDL_Renderer* renderer, bool &startGame) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    SDL_Color white = { 255, 255, 255 };
    SDL_Color black = { 0, 0, 0 };

    // Create the start button
    SDL_Rect startButton = { SCREEN_WIDTH / 4, SCREEN_HEIGHT / 2 - 25, SCREEN_WIDTH / 2, 50 };
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255); // White color
    SDL_RenderFillRect(renderer, &startButton);

    SDL_RenderPresent(renderer);

    SDL_Event e;
    while (!startGame) {
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) {
                exit(0);
            } else if (e.type == SDL_MOUSEBUTTONDOWN) {
                int x, y;
                SDL_GetMouseState(&x, &y);
                if (x >= startButton.x && x <= startButton.x + startButton.w && y >= startButton.y && y <= startButton.y + startButton.h) {
                    startGame = true;
                }
            }
        }
    }
}

int main(int argc, char* args[]) {
    srand(time(0));
    
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cout << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Tetris", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == NULL) {
        std::cout << "Window could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    SDL_Event e;
    bool quit = false;
    bool paused = false;
    bool startGame = false;  // 新增一個變數來表示遊戲是否開始
    int dx = 0, color = 1;
    bool rotate = false;

    int n = rand() % 7;
    for (int i = 0; i < 4; i++) {
        a[i].x = shapes[n][i] % 2;
        a[i].y = shapes[n][i] / 2;
    }

    Uint32 start_time = SDL_GetTicks();

    // 顯示起始畫面
    showStartScreen(renderer, startGame);

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = true;
            } else if (e.type == SDL_KEYDOWN) {
                if (e.key.keysym.sym == SDLK_LEFT) {
                    dx = -1;
                } else if (e.key.keysym.sym == SDLK_RIGHT) {
                    dx = 1;
                } else if (e.key.keysym.sym == SDLK_DOWN) {
                    start_time = SDL_GetTicks() - 300;
                } else if (e.key.keysym.sym == SDLK_UP) {
                    rotate = true;
                } else if (e.key.keysym.sym == SDLK_ESCAPE) {
                    paused = !paused;
                }
            }
        }

        if (!paused) {
            // Move
            for (int i = 0; i < 4; i++) {
                b[i] = a[i];
                a[i].x += dx;
            }
            if (!check()) {
                for (int i = 0; i < 4; i++) a[i] = b[i];
            }

            // Rotate
            if (rotate) {
                Point p = a[1]; // center of rotation
                for (int i = 0; i < 4; i++) {
                    int x = a[i].y - p.y;
                    int y = a[i].x - p.x;
                    a[i].x = p.x - x;
                    a[i].y = p.y + y;
                }
                if (!check()) {
                    for (int i = 0; i < 4; i++) a[i] = b[i];
                }
            }

            // Tick
            Uint32 current_time = SDL_GetTicks();
            if (current_time - start_time > 300) {
                for (int i = 0; i < 4; i++) {
                    b[i] = a[i];
                    a[i].y += 1;
                }

                if (!check()) {
                    for (int i = 0; i < 4; i++) field[b[i].y][b[i].x] = color;
                    color = 1 + rand() % 7;
                    n = rand() % 7;
                    for (int i = 0; i < 4; i++) {
                        a[i].x = shapes[n][i] % 2;
                        a[i].y = shapes[n][i] / 2;
                    }
                    clearLines();
                    if (!check()) {
                        quit = true;
                    }
                }

                start_time = current_time;
            }

            dx = 0;
            rotate = false;
        }

        // Clear screen
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Draw field
        for (int i = 0; i < FIELD_HEIGHT; i++) {
            for (int j = 0; j < FIELD_WIDTH; j++) {
                if (field[i][j] != 0) {
                    SDL_Rect fillRect = { j * BLOCK_SIZE, i * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE };
                    SDL_SetRenderDrawColor(renderer, field[i][j] * 30, field[i][j] * 60, field[i][j] * 90, 255);
                    SDL_RenderFillRect(renderer, &fillRect);
                }
            }
        }

        // Draw current Tetrimino
        for (int i = 0; i < 4; i++) {
            SDL_Rect fillRect = { a[i].x * BLOCK_SIZE, a[i].y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE };
            SDL_SetRenderDrawColor(renderer, color * 30, color * 60, color * 90, 255);
            SDL_RenderFillRect(renderer, &fillRect);
        }

        // Update screen
        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

