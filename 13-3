//PREPEND BEGIN
#include <iostream>
#include <iomanip>
using namespace std;
//PREPEND END

//TEMPLATE BEGIN
class Polynomial{
    public:
        int degree;
        int *coefficients;

        Polynomial(){}

        void SetValue(int coeff[], int size){
            degree = size - 1;
            coefficients = new int[size];
            for(int i = 0; i < size; i++){
                coefficients[i] = coeff[i];
            }
        }

        void print(){
            for(int i = degree; i >= 2; i--){
                if(coefficients[i] > 0) cout << '+';
                if(coefficients[i]) cout << coefficients[i] << "x^" << i;
            }
            if(coefficients[1] > 0 && degree >= 1) cout << '+';
            if(coefficients[1] && degree >= 1) cout << coefficients[1] << "x";
            if(coefficients[0] > 0) cout << '+';
            if(coefficients[0]) cout << coefficients[0];
            cout << '\n';
        }

        Polynomial add(Polynomial *other){
            Polynomial result;
            int maxDegree = (degree > other->degree) ? degree : other->degree;
            result.degree = maxDegree;
            result.coefficients = new int[maxDegree + 1]{0};

            for(int i = 0; i <= degree; i++){
                result.coefficients[i] += coefficients[i];
            }
            for(int i = 0; i <= other->degree; i++){
                result.coefficients[i] += other->coefficients[i];
            }
            return result;
        }

        Polynomial multiply(Polynomial *other){
            Polynomial result;
            result.degree = degree + other->degree;
            result.coefficients = new int[result.degree + 1]{0};

            for(int i = 0; i <= degree; i++){
                for(int j = 0; j <= other->degree; j++){
                    result.coefficients[i + j] += coefficients[i] * other->coefficients[j];
                }
            }
            return result;
        }

        ~Polynomial(){
            delete[] coefficients;
        }
};
//TEMPLATE END

//APPEND BEGIN
void test() {
    int n, m;
    int cmds, cmd, pid, pid2;
    int v[4096]={};
    cin >> n;
    Polynomial *p = new Polynomial[n];
    for (int i = 0; i < n; i++) {
        cin >> m;
        for (int j = 0; j < m; j++)
            cin >> v[j];
        p[i].SetValue(v, m);
    }

    cin >> cmds;
    for (int i = 0; i < cmds; i++) {
        cin >> cmd >> pid;
        if (cmd == 1) {
            p[pid].print();
        } else if (cmd == 2) {
            cin >> pid2;
            Polynomial ret = p[pid].add(&p[pid2]);
            ret.print();
        } else if (cmd == 3) {
            cin >> pid2;
            Polynomial ret = p[pid].multiply(&p[pid2]);
            ret.print();
        }
    }
}
int main() {
    test();
    return 0;
}
//APPEND END
