//PREPEND BEGIN
#include <iostream>
using namespace std;
int main() 
{
	int i, j;
	int A[3][3];
	double b[3];
	double x[3] = {0};
	for (i = 0; i < 3; i++) 
	{
		for (j = 0; j < 3; j++) 
		{
			cin >> A[i][j];
                }
        }
	for (i = 0; i < 3; i++) 
	{
		cin >> b[i];
        }
//PREPEND END
    
//TEMPLATE BEGIN    
	double A_inv[3][3]={};
	double det_A;
	det_A = A[0][0]*(A[2][2]*A[1][1]-A[1][2]*A[2][1]) -A[0][1]*(A[1][0]*A[2][2]-A[2][0]*A[1][2]) +A[0][2]*(A[1][0]*A[2][1]-A[1][1]*A[2][0]);
	if (det_A==0) {
		cout <<"Determinant is equal to zero, we cannot find x with the inverse matrix."<<endl;
		x[0] = -999;
		x[1] = -999;
		x[2] = -999;

	}
	else{
		A_inv[0][0] = ((A[1][1]*A[2][2]-A[1][2]*A[2][1]))/det_A;
		A_inv[0][1] = -1*((A[0][1]*A[2][2]-A[0][2]*A[2][1]))/det_A;
		A_inv[0][2] = ((A[0][1]*A[1][2]-A[0][2]*A[1][1]))/det_A;
		
		A_inv[1][0] = -1*((A[1][0]*A[2][2]-A[1][2]*A[2][0]))/det_A;
		A_inv[1][1] = ((A[0][0]*A[2][2]-A[0][2]*A[2][0]))/det_A;
		A_inv[1][2] = -1*((A[0][0]*A[1][2]-A[0][2]*A[1][0]))/det_A;
		
		A_inv[2][0] = ((A[1][0]*A[2][1]-A[1][1]*A[2][0]))/det_A;
		A_inv[2][1] = -1*((A[0][0]*A[2][1]-A[0][1]*A[2][0]))/det_A;
		A_inv[2][2] = ((A[0][0]*A[1][1]-A[0][1]*A[1][0]))/det_A;
		
		for(int i=0;i<3;i++){
			x[i] =  A_inv[i][0]*b[0] + A_inv[i][1]*b[1] + A_inv[i][2]*b[2]; 
			//cout<<"A_inv["<<i<<"][0]="<<A_inv[i][0]<<" "<<" A_inv["<<i<<"][1]="<<A_inv[i][1]<<" A_inv["<<i<<"][2]="<<A_inv[i][2]<<endl;
		}
	}
	


//TEMPLATE END    
    
//APPEND BEGIN  
        for (i = 0; i < 3; i++) 
	{
		cout << x[i] << '\t';
        }
	return 0;
}
//APPEND END
